/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.tinkoff.zeppelin.interpreter.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-07-16")
public class RemoteCompleterThriftService {

  public interface Iface extends RemoteProcessThriftService.Iface {

    public java.lang.String compete(java.lang.String st, int cursorPosition, java.util.Map<java.lang.String,java.lang.String> noteContext, java.util.Map<java.lang.String,java.lang.String> userContext, java.util.Map<java.lang.String,java.lang.String> configuration) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends RemoteProcessThriftService .AsyncIface {

    public void compete(java.lang.String st, int cursorPosition, java.util.Map<java.lang.String,java.lang.String> noteContext, java.util.Map<java.lang.String,java.lang.String> userContext, java.util.Map<java.lang.String,java.lang.String> configuration, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends RemoteProcessThriftService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String compete(java.lang.String st, int cursorPosition, java.util.Map<java.lang.String,java.lang.String> noteContext, java.util.Map<java.lang.String,java.lang.String> userContext, java.util.Map<java.lang.String,java.lang.String> configuration) throws org.apache.thrift.TException
    {
      send_compete(st, cursorPosition, noteContext, userContext, configuration);
      return recv_compete();
    }

    public void send_compete(java.lang.String st, int cursorPosition, java.util.Map<java.lang.String,java.lang.String> noteContext, java.util.Map<java.lang.String,java.lang.String> userContext, java.util.Map<java.lang.String,java.lang.String> configuration) throws org.apache.thrift.TException
    {
      compete_args args = new compete_args();
      args.setSt(st);
      args.setCursorPosition(cursorPosition);
      args.setNoteContext(noteContext);
      args.setUserContext(userContext);
      args.setConfiguration(configuration);
      sendBase("compete", args);
    }

    public java.lang.String recv_compete() throws org.apache.thrift.TException
    {
      compete_result result = new compete_result();
      receiveBase(result, "compete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "compete failed: unknown result");
    }

  }
  public static class AsyncClient extends RemoteProcessThriftService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void compete(java.lang.String st, int cursorPosition, java.util.Map<java.lang.String,java.lang.String> noteContext, java.util.Map<java.lang.String,java.lang.String> userContext, java.util.Map<java.lang.String,java.lang.String> configuration, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      compete_call method_call = new compete_call(st, cursorPosition, noteContext, userContext, configuration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compete_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String st;
      private int cursorPosition;
      private java.util.Map<java.lang.String,java.lang.String> noteContext;
      private java.util.Map<java.lang.String,java.lang.String> userContext;
      private java.util.Map<java.lang.String,java.lang.String> configuration;
      public compete_call(java.lang.String st, int cursorPosition, java.util.Map<java.lang.String,java.lang.String> noteContext, java.util.Map<java.lang.String,java.lang.String> userContext, java.util.Map<java.lang.String,java.lang.String> configuration, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.st = st;
        this.cursorPosition = cursorPosition;
        this.noteContext = noteContext;
        this.userContext = userContext;
        this.configuration = configuration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("compete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compete_args args = new compete_args();
        args.setSt(st);
        args.setCursorPosition(cursorPosition);
        args.setNoteContext(noteContext);
        args.setUserContext(userContext);
        args.setConfiguration(configuration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_compete();
      }
    }

  }

  public static class Processor<I extends Iface> extends RemoteProcessThriftService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("compete", new compete());
      return processMap;
    }

    public static class compete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compete_args> {
      public compete() {
        super("compete");
      }

      public compete_args getEmptyArgsInstance() {
        return new compete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public compete_result getResult(I iface, compete_args args) throws org.apache.thrift.TException {
        compete_result result = new compete_result();
        result.success = iface.compete(args.st, args.cursorPosition, args.noteContext, args.userContext, args.configuration);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends RemoteProcessThriftService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("compete", new compete());
      return processMap;
    }

    public static class compete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, compete_args, java.lang.String> {
      public compete() {
        super("compete");
      }

      public compete_args getEmptyArgsInstance() {
        return new compete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            compete_result result = new compete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            compete_result result = new compete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, compete_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.compete(args.st, args.cursorPosition, args.noteContext, args.userContext, args.configuration,resultHandler);
      }
    }

  }

  public static class compete_args implements org.apache.thrift.TBase<compete_args, compete_args._Fields>, java.io.Serializable, Cloneable, Comparable<compete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compete_args");

    private static final org.apache.thrift.protocol.TField ST_FIELD_DESC = new org.apache.thrift.protocol.TField("st", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CURSOR_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("cursorPosition", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NOTE_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("noteContext", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField USER_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("userContext", org.apache.thrift.protocol.TType.MAP, (short)4);
    private static final org.apache.thrift.protocol.TField CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("configuration", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new compete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new compete_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String st; // required
    public int cursorPosition; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> noteContext; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> userContext; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> configuration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ST((short)1, "st"),
      CURSOR_POSITION((short)2, "cursorPosition"),
      NOTE_CONTEXT((short)3, "noteContext"),
      USER_CONTEXT((short)4, "userContext"),
      CONFIGURATION((short)5, "configuration");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ST
            return ST;
          case 2: // CURSOR_POSITION
            return CURSOR_POSITION;
          case 3: // NOTE_CONTEXT
            return NOTE_CONTEXT;
          case 4: // USER_CONTEXT
            return USER_CONTEXT;
          case 5: // CONFIGURATION
            return CONFIGURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CURSORPOSITION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ST, new org.apache.thrift.meta_data.FieldMetaData("st", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CURSOR_POSITION, new org.apache.thrift.meta_data.FieldMetaData("cursorPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NOTE_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("noteContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.USER_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("userContext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("configuration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compete_args.class, metaDataMap);
    }

    public compete_args() {
    }

    public compete_args(
      java.lang.String st,
      int cursorPosition,
      java.util.Map<java.lang.String,java.lang.String> noteContext,
      java.util.Map<java.lang.String,java.lang.String> userContext,
      java.util.Map<java.lang.String,java.lang.String> configuration)
    {
      this();
      this.st = st;
      this.cursorPosition = cursorPosition;
      setCursorPositionIsSet(true);
      this.noteContext = noteContext;
      this.userContext = userContext;
      this.configuration = configuration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compete_args(compete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSt()) {
        this.st = other.st;
      }
      this.cursorPosition = other.cursorPosition;
      if (other.isSetNoteContext()) {
        java.util.Map<java.lang.String,java.lang.String> __this__noteContext = new java.util.HashMap<java.lang.String,java.lang.String>(other.noteContext);
        this.noteContext = __this__noteContext;
      }
      if (other.isSetUserContext()) {
        java.util.Map<java.lang.String,java.lang.String> __this__userContext = new java.util.HashMap<java.lang.String,java.lang.String>(other.userContext);
        this.userContext = __this__userContext;
      }
      if (other.isSetConfiguration()) {
        java.util.Map<java.lang.String,java.lang.String> __this__configuration = new java.util.HashMap<java.lang.String,java.lang.String>(other.configuration);
        this.configuration = __this__configuration;
      }
    }

    public compete_args deepCopy() {
      return new compete_args(this);
    }

    @Override
    public void clear() {
      this.st = null;
      setCursorPositionIsSet(false);
      this.cursorPosition = 0;
      this.noteContext = null;
      this.userContext = null;
      this.configuration = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSt() {
      return this.st;
    }

    public compete_args setSt(@org.apache.thrift.annotation.Nullable java.lang.String st) {
      this.st = st;
      return this;
    }

    public void unsetSt() {
      this.st = null;
    }

    /** Returns true if field st is set (has been assigned a value) and false otherwise */
    public boolean isSetSt() {
      return this.st != null;
    }

    public void setStIsSet(boolean value) {
      if (!value) {
        this.st = null;
      }
    }

    public int getCursorPosition() {
      return this.cursorPosition;
    }

    public compete_args setCursorPosition(int cursorPosition) {
      this.cursorPosition = cursorPosition;
      setCursorPositionIsSet(true);
      return this;
    }

    public void unsetCursorPosition() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURSORPOSITION_ISSET_ID);
    }

    /** Returns true if field cursorPosition is set (has been assigned a value) and false otherwise */
    public boolean isSetCursorPosition() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURSORPOSITION_ISSET_ID);
    }

    public void setCursorPositionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURSORPOSITION_ISSET_ID, value);
    }

    public int getNoteContextSize() {
      return (this.noteContext == null) ? 0 : this.noteContext.size();
    }

    public void putToNoteContext(java.lang.String key, java.lang.String val) {
      if (this.noteContext == null) {
        this.noteContext = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.noteContext.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getNoteContext() {
      return this.noteContext;
    }

    public compete_args setNoteContext(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> noteContext) {
      this.noteContext = noteContext;
      return this;
    }

    public void unsetNoteContext() {
      this.noteContext = null;
    }

    /** Returns true if field noteContext is set (has been assigned a value) and false otherwise */
    public boolean isSetNoteContext() {
      return this.noteContext != null;
    }

    public void setNoteContextIsSet(boolean value) {
      if (!value) {
        this.noteContext = null;
      }
    }

    public int getUserContextSize() {
      return (this.userContext == null) ? 0 : this.userContext.size();
    }

    public void putToUserContext(java.lang.String key, java.lang.String val) {
      if (this.userContext == null) {
        this.userContext = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.userContext.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getUserContext() {
      return this.userContext;
    }

    public compete_args setUserContext(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> userContext) {
      this.userContext = userContext;
      return this;
    }

    public void unsetUserContext() {
      this.userContext = null;
    }

    /** Returns true if field userContext is set (has been assigned a value) and false otherwise */
    public boolean isSetUserContext() {
      return this.userContext != null;
    }

    public void setUserContextIsSet(boolean value) {
      if (!value) {
        this.userContext = null;
      }
    }

    public int getConfigurationSize() {
      return (this.configuration == null) ? 0 : this.configuration.size();
    }

    public void putToConfiguration(java.lang.String key, java.lang.String val) {
      if (this.configuration == null) {
        this.configuration = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.configuration.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getConfiguration() {
      return this.configuration;
    }

    public compete_args setConfiguration(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> configuration) {
      this.configuration = configuration;
      return this;
    }

    public void unsetConfiguration() {
      this.configuration = null;
    }

    /** Returns true if field configuration is set (has been assigned a value) and false otherwise */
    public boolean isSetConfiguration() {
      return this.configuration != null;
    }

    public void setConfigurationIsSet(boolean value) {
      if (!value) {
        this.configuration = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ST:
        if (value == null) {
          unsetSt();
        } else {
          setSt((java.lang.String)value);
        }
        break;

      case CURSOR_POSITION:
        if (value == null) {
          unsetCursorPosition();
        } else {
          setCursorPosition((java.lang.Integer)value);
        }
        break;

      case NOTE_CONTEXT:
        if (value == null) {
          unsetNoteContext();
        } else {
          setNoteContext((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case USER_CONTEXT:
        if (value == null) {
          unsetUserContext();
        } else {
          setUserContext((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case CONFIGURATION:
        if (value == null) {
          unsetConfiguration();
        } else {
          setConfiguration((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ST:
        return getSt();

      case CURSOR_POSITION:
        return getCursorPosition();

      case NOTE_CONTEXT:
        return getNoteContext();

      case USER_CONTEXT:
        return getUserContext();

      case CONFIGURATION:
        return getConfiguration();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ST:
        return isSetSt();
      case CURSOR_POSITION:
        return isSetCursorPosition();
      case NOTE_CONTEXT:
        return isSetNoteContext();
      case USER_CONTEXT:
        return isSetUserContext();
      case CONFIGURATION:
        return isSetConfiguration();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof compete_args)
        return this.equals((compete_args)that);
      return false;
    }

    public boolean equals(compete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_st = true && this.isSetSt();
      boolean that_present_st = true && that.isSetSt();
      if (this_present_st || that_present_st) {
        if (!(this_present_st && that_present_st))
          return false;
        if (!this.st.equals(that.st))
          return false;
      }

      boolean this_present_cursorPosition = true;
      boolean that_present_cursorPosition = true;
      if (this_present_cursorPosition || that_present_cursorPosition) {
        if (!(this_present_cursorPosition && that_present_cursorPosition))
          return false;
        if (this.cursorPosition != that.cursorPosition)
          return false;
      }

      boolean this_present_noteContext = true && this.isSetNoteContext();
      boolean that_present_noteContext = true && that.isSetNoteContext();
      if (this_present_noteContext || that_present_noteContext) {
        if (!(this_present_noteContext && that_present_noteContext))
          return false;
        if (!this.noteContext.equals(that.noteContext))
          return false;
      }

      boolean this_present_userContext = true && this.isSetUserContext();
      boolean that_present_userContext = true && that.isSetUserContext();
      if (this_present_userContext || that_present_userContext) {
        if (!(this_present_userContext && that_present_userContext))
          return false;
        if (!this.userContext.equals(that.userContext))
          return false;
      }

      boolean this_present_configuration = true && this.isSetConfiguration();
      boolean that_present_configuration = true && that.isSetConfiguration();
      if (this_present_configuration || that_present_configuration) {
        if (!(this_present_configuration && that_present_configuration))
          return false;
        if (!this.configuration.equals(that.configuration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSt()) ? 131071 : 524287);
      if (isSetSt())
        hashCode = hashCode * 8191 + st.hashCode();

      hashCode = hashCode * 8191 + cursorPosition;

      hashCode = hashCode * 8191 + ((isSetNoteContext()) ? 131071 : 524287);
      if (isSetNoteContext())
        hashCode = hashCode * 8191 + noteContext.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserContext()) ? 131071 : 524287);
      if (isSetUserContext())
        hashCode = hashCode * 8191 + userContext.hashCode();

      hashCode = hashCode * 8191 + ((isSetConfiguration()) ? 131071 : 524287);
      if (isSetConfiguration())
        hashCode = hashCode * 8191 + configuration.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(compete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSt()).compareTo(other.isSetSt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.st, other.st);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCursorPosition()).compareTo(other.isSetCursorPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCursorPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cursorPosition, other.cursorPosition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNoteContext()).compareTo(other.isSetNoteContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNoteContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteContext, other.noteContext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserContext()).compareTo(other.isSetUserContext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserContext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userContext, other.userContext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConfiguration()).compareTo(other.isSetConfiguration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfiguration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configuration, other.configuration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("compete_args(");
      boolean first = true;

      sb.append("st:");
      if (this.st == null) {
        sb.append("null");
      } else {
        sb.append(this.st);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cursorPosition:");
      sb.append(this.cursorPosition);
      first = false;
      if (!first) sb.append(", ");
      sb.append("noteContext:");
      if (this.noteContext == null) {
        sb.append("null");
      } else {
        sb.append(this.noteContext);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userContext:");
      if (this.userContext == null) {
        sb.append("null");
      } else {
        sb.append(this.userContext);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("configuration:");
      if (this.configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.configuration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compete_argsStandardScheme getScheme() {
        return new compete_argsStandardScheme();
      }
    }

    private static class compete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<compete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.st = iprot.readString();
                struct.setStIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURSOR_POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cursorPosition = iprot.readI32();
                struct.setCursorPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTE_CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.noteContext = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.noteContext.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setNoteContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // USER_CONTEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                  struct.userContext = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map4.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key5;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val6;
                  for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                  {
                    _key5 = iprot.readString();
                    _val6 = iprot.readString();
                    struct.userContext.put(_key5, _val6);
                  }
                  iprot.readMapEnd();
                }
                struct.setUserContextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONFIGURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                  struct.configuration = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map8.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key9;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val10;
                  for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                  {
                    _key9 = iprot.readString();
                    _val10 = iprot.readString();
                    struct.configuration.put(_key9, _val10);
                  }
                  iprot.readMapEnd();
                }
                struct.setConfigurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.st != null) {
          oprot.writeFieldBegin(ST_FIELD_DESC);
          oprot.writeString(struct.st);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CURSOR_POSITION_FIELD_DESC);
        oprot.writeI32(struct.cursorPosition);
        oprot.writeFieldEnd();
        if (struct.noteContext != null) {
          oprot.writeFieldBegin(NOTE_CONTEXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.noteContext.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter12 : struct.noteContext.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.userContext != null) {
          oprot.writeFieldBegin(USER_CONTEXT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.userContext.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter13 : struct.userContext.entrySet())
            {
              oprot.writeString(_iter13.getKey());
              oprot.writeString(_iter13.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.configuration != null) {
          oprot.writeFieldBegin(CONFIGURATION_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.configuration.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.configuration.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compete_argsTupleScheme getScheme() {
        return new compete_argsTupleScheme();
      }
    }

    private static class compete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<compete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSt()) {
          optionals.set(0);
        }
        if (struct.isSetCursorPosition()) {
          optionals.set(1);
        }
        if (struct.isSetNoteContext()) {
          optionals.set(2);
        }
        if (struct.isSetUserContext()) {
          optionals.set(3);
        }
        if (struct.isSetConfiguration()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSt()) {
          oprot.writeString(struct.st);
        }
        if (struct.isSetCursorPosition()) {
          oprot.writeI32(struct.cursorPosition);
        }
        if (struct.isSetNoteContext()) {
          {
            oprot.writeI32(struct.noteContext.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.noteContext.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
        if (struct.isSetUserContext()) {
          {
            oprot.writeI32(struct.userContext.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter16 : struct.userContext.entrySet())
            {
              oprot.writeString(_iter16.getKey());
              oprot.writeString(_iter16.getValue());
            }
          }
        }
        if (struct.isSetConfiguration()) {
          {
            oprot.writeI32(struct.configuration.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter17 : struct.configuration.entrySet())
            {
              oprot.writeString(_iter17.getKey());
              oprot.writeString(_iter17.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.st = iprot.readString();
          struct.setStIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cursorPosition = iprot.readI32();
          struct.setCursorPositionIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map18 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.noteContext = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map18.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key19;
            @org.apache.thrift.annotation.Nullable java.lang.String _val20;
            for (int _i21 = 0; _i21 < _map18.size; ++_i21)
            {
              _key19 = iprot.readString();
              _val20 = iprot.readString();
              struct.noteContext.put(_key19, _val20);
            }
          }
          struct.setNoteContextIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.userContext = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map22.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key23;
            @org.apache.thrift.annotation.Nullable java.lang.String _val24;
            for (int _i25 = 0; _i25 < _map22.size; ++_i25)
            {
              _key23 = iprot.readString();
              _val24 = iprot.readString();
              struct.userContext.put(_key23, _val24);
            }
          }
          struct.setUserContextIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.configuration = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map26.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key27;
            @org.apache.thrift.annotation.Nullable java.lang.String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.configuration.put(_key27, _val28);
            }
          }
          struct.setConfigurationIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class compete_result implements org.apache.thrift.TBase<compete_result, compete_result._Fields>, java.io.Serializable, Cloneable, Comparable<compete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new compete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new compete_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compete_result.class, metaDataMap);
    }

    public compete_result() {
    }

    public compete_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compete_result(compete_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public compete_result deepCopy() {
      return new compete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public compete_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof compete_result)
        return this.equals((compete_result)that);
      return false;
    }

    public boolean equals(compete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(compete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("compete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compete_resultStandardScheme getScheme() {
        return new compete_resultStandardScheme();
      }
    }

    private static class compete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<compete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compete_resultTupleScheme getScheme() {
        return new compete_resultTupleScheme();
      }
    }

    private static class compete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<compete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
